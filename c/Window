#include "Window.h"

#include <string.h>

void drawMainMenu(osspriteop_area *area, HUD *hud, Player *mario, os_factors *factors, int x, int y, FILE *logFile)
{
	
}

void drawHUD(osspriteop_area *area, HUD *hud, Player *mario, int phaseNum, os_factors *factors, int x, int y, FILE *logFile)
{
	//Points I
	os_error *e = xosspriteop_put_sprite_scaled(
		osspriteop_PTR,
		area,
		(osspriteop_id) hud->points_i,
		x + 24*4,
		y + 201*4,
		os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
		factors,
		mario->mainTransTab
	);
	
	if (e != NULL)
	{
		fprintf(logFile, "Put points_i failed\n"
			"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Score I
	updateHUDScore(hud, mario->score);
	for (int i = 0; i < 6; i++)
	{
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) hud->scoreDisplayI[i],
			(x + 32*4) + (i * (8*4)),
			y + 201*4,
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put score I failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Points Top
	e = xosspriteop_put_sprite_scaled(
		osspriteop_PTR,
		area,
		(osspriteop_id) hud->points_top,
		x + 91*4,
		y + 201*4,
		os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
		factors,
		mario->mainTransTab
	);
	
	if (e != NULL)
	{
		fprintf(logFile, "Put points_top failed\n"
			"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Score Top
	for (int i = 0; i < 6; i++)
	{
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) hud->scoreDisplayTop[i],
			(x + 112*4) + (i * (8*4)),
			y + 201*4,
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put score top failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Lives
	for (int i = 0; i < mario->extraLives; i++)
	{
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) hud->mario_hud,
			(x + 64*4) + (i * (8*4 + 5*4)),
			y + 191*4,
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put mario_hud failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Phase
	e = xosspriteop_put_sprite_scaled(
		osspriteop_PTR,
		area,
		(osspriteop_id) hud->p_equals,
		x + 8*4,
		y + 16*4,
		os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
		factors,
		mario->mainTransTab
	);
	
	if (e != NULL)
	{
		fprintf(logFile, "Put p_equals failed\n"
			"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	for (int i = 0; i < 2; i++)
	{
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) hud->phaseNumDisplay[i],
			(x + 24*4) + (i * (8*4)),
			y + 16*4,
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put phaseNumDisplay failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		if (phaseNum < 10)
		{
			break;
		}
	}
}

void drawPlatHit(osspriteop_area *area, Level *level, os_factors *factors, int x, int y, int i, int curPlatRow, FILE *logFile)
{
	os_error *e = xosspriteop_put_sprite_scaled(
		osspriteop_PTR,
		area,
		(osspriteop_id) level->platMoveFrames[level->frame],
		x + (level->plats[curPlatRow].x) + ((i - 1) * 8 * factors->xmul * 2),
		y + level->plats[curPlatRow].y,
		os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
		factors,
		level->transTab
	);
	
	switch (level->frame)
	{
		case 0:
			if (!(level->framesDescending))
			{
				(level->frame)++;
			}
			else
			{
				level->platRow = NOT_HIT;
				level->platSquare = 0;
				level->framesDescending = 0;
			}
			break;
		case 1:
			if (!(level->framesDescending))
			{
				(level->frame)++;
			}
			else
			{
				(level->frame)--;
			}
			break;
		case 2:
			level->framesDescending = 1;
			(level->frame)--;
			break;
	}
}

void drawPlatforms(osspriteop_area *area, Level *level, os_factors *factors, int x, int y, FILE *logFile)
{
	//Top-left platform
	for (int i = 0; i < 14; i++)
	{
		if (level->platRow == TOP_LEFT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 0, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (i * 8 * factors->xmul * 2),
			y + (152 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Top-right platform
	for (int i = 0; i < 14; i++)
	{
		if (level->platRow == TOP_RIGHT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 1, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (144 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (152 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Middle-left platform
	for (int i = 0; i < 4; i++)
	{
		if (level->platRow == MIDDLE_LEFT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 2, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (i * 8 * factors->xmul * 2),
			y + (96 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Middle-right platform
	for (int i = 0; i < 4; i++)
	{
		if (level->platRow == MIDDLE_RIGHT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 3, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (224 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (96 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Middle platform
	for (int i = 0; i < 16; i++)
	{
		if (level->platRow == MIDDLE)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 4, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (64 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (104 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Bottom-left platform
	for (int i = 0; i < 12; i++)
	{
		if (level->platRow == BOTTOM_LEFT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 5, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (i * 8 * factors->xmul * 2),
			y + (56 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Bottom-right platform
	for (int i = 0; i < 12; i++)
	{
		if (level->platRow == BOTTOM_RIGHT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 6, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (160 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (56 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
}

void redrawWindowPlaying(wimp_block *block, osspriteop_area *area, Player *mario, Level *level, HUD *hud, enum GameState *gameState, os_factors *factors, FILE *logFile)
{
	wimp_draw draw;
	
	draw.w = block->redraw.w;
	draw.box = block->redraw.box;
	
	int more;
	
	xwimp_redraw_window(&draw, &more);
	
	while (more)
	{
		int x = draw.box.x0 - draw.xscroll;
		int y = draw.box.y1 - draw.yscroll;
		
		switch (*gameState)
		{
			case MAIN_MENU:
			{
				os_error *e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) hud->main_menu,
					x,
					y,
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->mainTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put main_menu failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				break;
			}
			case PLAYING:
			case GAME_OVER:
			{
				//Draw floor
				os_error *e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) level->floor,
					x,
					y,
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->mainTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put level floor failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				
				//Draw platforms
				drawPlatforms(area, level, factors, x, y, logFile);
				
				//Draw HUD
				drawHUD(area, hud, mario, level->phaseNum, factors, x, y, logFile);
				
				//Draw game over text
				if (*gameState == GAME_OVER)
				{
					e = xosspriteop_put_sprite_scaled(
						osspriteop_PTR,
						area,
						(osspriteop_id) hud->game_over_text,
						x + 96*4,
						y + 128*4,
						os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
						factors,
						mario->curTransTab
					);
					
					if (e != NULL)
					{
						fprintf(logFile, "Put game over text failed\n"
							"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
						fflush(logFile);
					}
				}
				
				//Draw enemies
				for (int i = 0; i < level->numOfShellcreepers; i++)
				{
					Enemy *scInfo = &(level->shellcreepers[i].enemy);
					if (scInfo->facing == 'R')
					{
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_still");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk0");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk1");
					}
					
					e = xosspriteop_put_sprite_scaled(
						osspriteop_PTR,
						area,
						(osspriteop_id) level->shellcreepers[i].curFrame,
						x + scInfo->x,
						y + scInfo->y,
						os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
						factors,
						level->shellcreepers[i].transTab
					);
					
					if (scInfo->facing == 'R')
					{
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_still");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk0");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk1");
					}
					
					if (e != NULL)
					{
						fprintf(logFile, "Put shellcreeper %d failed\n"
							"	errnum = %d: message = '%s'\n", i, e->errnum, e->errmess);
						fflush(logFile);
					}
				}
				
				for (int i = 0; i < level->numOfSidesteppers; i++)
				{
					Enemy *ssInfo = &(level->sidesteppers[i].enemy);
					if (ssInfo->facing == 'R')
					{
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_walk0");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_walk1");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_walk2");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_run0");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_run1");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_run2");
					}
					
					e = xosspriteop_put_sprite_scaled(
						osspriteop_PTR,
						area,
						(osspriteop_id) level->sidesteppers[i].curFrame,
						x + ssInfo->x,
						y + ssInfo->y,
						os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
						factors,
						level->sidesteppers[i].transTab
					);
					
					if (ssInfo->facing == 'R')
					{
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_walk0");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_walk1");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_walk2");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_run0");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_run1");
						osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "ss_run2");
					}
					
					if (e != NULL)
					{
						fprintf(logFile, "Put sidestepper %d failed\n"
							"	errnum = %d: message = '%s'\n", i, e->errnum, e->errmess);
						fflush(logFile);
					}
				}
				
				//Draw coins
				for (int i = 0; i < level->numOfCoins; i++)
				{
					if (! level->coins[i].inactive)
					{
						e = xosspriteop_put_sprite_scaled(
							osspriteop_PTR,
							area,
							(osspriteop_id) level->coins[i].curFrame,
							x + level->coins[i].x,
							y + level->coins[i].y,
							os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
							factors,
							mario->mainTransTab
						);
						
						if (e != NULL)
						{
							fprintf(logFile, "Put coin %d failed\n"
								"	errnum = %d: message = '%s'\n", i, e->errnum, e->errmess);
							fflush(logFile);
						}
					}
				}
				
				//Draw pipes
				e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) level->pipeBottom,
					x + 1024 - (32*4),
					y + (25 * 4),
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->mainTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put pipe bottom right failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_bottom");
				
				e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) level->pipeBottom,
					x,
					y + (25 * 4),
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->mainTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put pipe bottom left failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_bottom");
				
				e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) level->pipeTop,
					x + 1024 - (48*4),
					y + 896 - (56*4),
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->mainTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put pipe top right failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_top");
				
				e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) level->pipeTop,
					x,
					y + 896 - (56*4),
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->mainTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put pipe top left failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_top");
				
				//Draw player
				e = xosspriteop_put_sprite_scaled(
					osspriteop_PTR,
					area,
					(osspriteop_id) mario->curFrame,
					x + mario->x,
					y + mario->y,
					os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
					factors,
					mario->curTransTab
				);
				
				if (e != NULL)
				{
					fprintf(logFile, "Put mario failed\n"
						"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
					fflush(logFile);
				}
				
				if (mario->state == PLAYER_RESPAWNING)
				{
					e = xosspriteop_put_sprite_scaled(
						osspriteop_PTR,
						area,
						(osspriteop_id) mario->respPlat,
						x + mario->x,
						y + mario->y - 8*4,
						os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
						factors,
						mario->curTransTab
					);
					
					if (e != NULL)
					{
						fprintf(logFile, "Put respPlat failed\n"
							"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
						fflush(logFile);
					}
				}
			}
		}
		
		
		xwimp_get_rectangle(&draw, &more);
	}
}

void loadWindowIntoBlock(wimp_window **window, wimp_block **block)
{
	(*block)->open.w = wimp_create_window(*window);
	(*block)->open.visible = (*window)->visible;
	(*block)->open.xscroll = (*window)->xscroll;
	(*block)->open.yscroll = (*window)->yscroll;
	(*block)->open.next = (*window)->next;
}

void addIconToBar()
{
	wimp_icon_create IBCr;
	IBCr.w = wimp_ICON_BAR_RIGHT;
	IBCr.icon.extent.x0 = 0;
	IBCr.icon.extent.y0 = 0;
	IBCr.icon.extent.x1 = 68;
	IBCr.icon.extent.y1 = 68;
	IBCr.icon.flags = wimp_ICON_SPRITE | wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT;
	strncpy(IBCr.icon.data.sprite, "mario_still", 12);
	wimp_create_icon(&IBCr);
}