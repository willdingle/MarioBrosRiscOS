#include "Window.h"

#include <string.h>

void drawPlatHit(osspriteop_area *area, Level *level, os_factors *factors, int x, int y, int i, int curPlatRow, FILE *logFile)
{
	os_error *e = xosspriteop_put_sprite_scaled(
		osspriteop_PTR,
		area,
		(osspriteop_id) level->platMoveFrames[level->frame],
		x + (level->plats[curPlatRow].x) + ((i - 1) * 8 * factors->xmul * 2),
		y + level->plats[curPlatRow].y,
		os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
		factors,
		level->transTab
	);
	
	switch (level->frame)
	{
		case 0:
			if (!(level->framesDescending))
			{
				(level->frame)++;
			}
			else
			{
				level->platRow = NOT_HIT;
				level->platSquare = 0;
				level->framesDescending = 0;
			}
			break;
		case 1:
			if (!(level->framesDescending))
			{
				(level->frame)++;
			}
			else
			{
				(level->frame)--;
			}
			break;
		case 2:
			level->framesDescending = 1;
			(level->frame)--;
			break;
	}
}

void drawPlatforms(osspriteop_area *area, Level *level, os_factors *factors, int x, int y, FILE *logFile)
{
	//Top-left platform
	for (int i = 0; i < 14; i++)
	{
		if (level->platRow == TOP_LEFT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 0, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (i * 8 * factors->xmul * 2),
			y + (152 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Top-right platform
	for (int i = 0; i < 14; i++)
	{
		if (level->platRow == TOP_RIGHT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 1, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (144 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (152 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Middle-left platform
	for (int i = 0; i < 4; i++)
	{
		if (level->platRow == MIDDLE_LEFT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 2, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (i * 8 * factors->xmul * 2),
			y + (96 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Middle-right platform
	for (int i = 0; i < 4; i++)
	{
		if (level->platRow == MIDDLE_RIGHT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 3, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (224 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (96 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Middle platform
	for (int i = 0; i < 16; i++)
	{
		if (level->platRow == MIDDLE)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 4, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (64 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (104 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Bottom-left platform
	for (int i = 0; i < 12; i++)
	{
		if (level->platRow == BOTTOM_LEFT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 5, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (i * 8 * factors->xmul * 2),
			y + (56 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	//Bottom-right platform
	for (int i = 0; i < 12; i++)
	{
		if (level->platRow == BOTTOM_RIGHT)
		{
			if (i == level->platSquare - 1 || i == level->platSquare + 1)
			{
				continue;
			}
			else if (i == level->platSquare)
			{
				//Draw platform hit animation
				drawPlatHit(area, level, factors, x, y, i, 6, logFile);
				continue;
			}	
		}
		
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->platTile,
			x + (160 * factors->xmul * 2) + (i * 8 * factors->xmul * 2),
			y + (56 * factors->ymul * 2),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			level->transTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put platform tile failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
	}
}

void redrawWindow(wimp_block *block, osspriteop_area *area, Player *mario, Level *level, os_factors *factors, FILE *logFile)
{
	wimp_draw draw;
	
	draw.w = block->redraw.w;
	draw.box = block->redraw.box;
	
	int more;
	
	xwimp_redraw_window(&draw, &more);
	
	while (more)
	{
		int x = draw.box.x0 - draw.xscroll;
		int y = draw.box.y1 - draw.yscroll;
		
		//Draw floor
		os_error *e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->floor,
			x,
			y,
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put level floor failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		//Draw pipes
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->pipeBottom,
			x + 1024 - (32*4),
			y + (25 * 4),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put pipe bottom right failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_bottom");
		
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->pipeBottom,
			x,
			y + (25 * 4),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put pipe bottom left failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_bottom");
		
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->pipeTop,
			x + 1024 - (48*4),
			y + 896 - (56*4),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put pipe top right failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_top");
		
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) level->pipeTop,
			x,
			y + 896 - (56*4),
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->mainTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put pipe top left failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "pipe_top");
		
		//Draw platforms
		drawPlatforms(area, level, factors, x, y, logFile);
		
		//Draw player
		e = xosspriteop_put_sprite_scaled(
			osspriteop_PTR,
			area,
			(osspriteop_id) mario->curFrame,
			x + mario->x,
			y + mario->y,
			os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
			factors,
			mario->curTransTab
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "Put mario failed\n"
				"	errnum = %d: message = '%s'\n", e->errnum, e->errmess);
			fflush(logFile);
		}
		
		//Draw enemies
		for (int i = 0; i < level->numOfShellcreepers; i++)
		{
			Enemy *scInfo = &(level->shellcreepers[i].enemy);
			if (scInfo->facing == 'R')
			{
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_still");
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk0");
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk1");
			}
			
			e = xosspriteop_put_sprite_scaled(
				osspriteop_PTR,
				area,
				(osspriteop_id) level->shellcreepers[i].curFrame,
				x + scInfo->x,
				y + scInfo->y,
				os_ACTION_OVERWRITE | osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
				factors,
				level->shellcreepers[i].transTab
			);
			
			if (scInfo->facing == 'R')
			{
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_still");
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk0");
				osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "sc_walk1");
			}
			
			if (e != NULL)
			{
				fprintf(logFile, "Put shellcreeper %d failed\n"
					"	errnum = %d: message = '%s'\n", i, e->errnum, e->errmess);
				fflush(logFile);
			}
		}
		
		
		
		xwimp_get_rectangle(&draw, &more);
	}
}

void loadWindowIntoBlock(wimp_window **window, wimp_block **block)
{
	(*block)->open.w = wimp_create_window(*window);
	(*block)->open.visible = (*window)->visible;
	(*block)->open.xscroll = (*window)->xscroll;
	(*block)->open.yscroll = (*window)->yscroll;
	(*block)->open.next = (*window)->next;
}

void addIconToBar()
{
	wimp_icon_create IBCr;
	IBCr.w = wimp_ICON_BAR_RIGHT;
	IBCr.icon.extent.x0 = 0;
	IBCr.icon.extent.y0 = 0;
	IBCr.icon.extent.x1 = 68;
	IBCr.icon.extent.y1 = 68;
	IBCr.icon.flags = wimp_ICON_SPRITE | wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT;
	strncpy(IBCr.icon.data.sprite, "mario_still", 12);
	wimp_create_icon(&IBCr);
}