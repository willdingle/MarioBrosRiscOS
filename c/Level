#include "Level.h"

#include "Sprites.h"
#include "Player.h"

#include <stdlib.h>
#include <math.h>
#include "oslib/os.h"

void initLevel(Level *level, Player *mario, osspriteop_area *area, int size, FILE *logFile)
{
	mario->x = 150;
	mario->y = 16*4;
	mario->width = 16;
	mario->height = 24;
	mario->xSpeed = 0;
	mario->xAcc = 1;
	mario->xMaxSpeed = 12;
	mario->ySpeed = 0;
	mario->state = PLAYER_LIVING;
	
	switch (level->levelNum)
	{
		case 1:
			selectLevelSprites(
				level,
				area,
				size,
				logFile
			);
			level->bonusLevel = 0;
			level->numOfShellcreepers = 3;
			level->numOfSidesteppers = 0;
			level->numOfCoins = 0;
			if (level->shellcreepers)
			{
				level->shellcreepers = (Shellcreeper*) realloc(level->shellcreepers, level->numOfShellcreepers * sizeof(Shellcreeper) + 10000);
			}
			else
			{
				level->shellcreepers = (Shellcreeper*) malloc(level->numOfShellcreepers * sizeof(Shellcreeper) + 10000);
			}
			level->shellcreepers[0].enemy.x = 1024 - 48*4;
			level->shellcreepers[0].enemy.y = 178*4;
			level->shellcreepers[0].enemy.width = 12;
			level->shellcreepers[0].enemy.height = 16;
			level->shellcreepers[0].enemy.xSpeed = 7;
			level->shellcreepers[0].enemy.xMaxSpeed = 7;
			level->shellcreepers[0].enemy.isFalling = 0;
			level->shellcreepers[0].enemy.facing = 'L';
			level->shellcreepers[0].enemy.state = ENEMY_IN_PIPE;
			level->shellcreepers[0].enemy.timeTillSpawn = 0;
			
			selectShellcreeperSprites(
				&(level->shellcreepers[0]),
				area,
				size,
				logFile
			);
			
			level->shellcreepers[1] = level->shellcreepers[0];
			level->shellcreepers[1].enemy.x = 48*4 - level->shellcreepers[1].enemy.width * 4;
			level->shellcreepers[1].enemy.facing = 'R';
			level->shellcreepers[1].enemy.timeTillSpawn = os_read_monotonic_time() + 300;
			
			level->shellcreepers[2] = level->shellcreepers[1];
			level->shellcreepers[2].enemy.x = 48*4 - level->shellcreepers[2].enemy.width * 4;
			level->shellcreepers[2].enemy.facing = 'R';
			level->shellcreepers[2].enemy.timeTillSpawn = os_read_monotonic_time() + 900;
			break;
			
		case 2:
			level->numOfShellcreepers = 4;
			level->numOfSidesteppers = 0;
			level->shellcreepers = (Shellcreeper*) realloc(level->shellcreepers, level->numOfShellcreepers * sizeof(Shellcreeper) + 10000);
			level->shellcreepers[0].enemy.x = 1024 - 48*4;
			level->shellcreepers[0].enemy.y = 178*4;
			level->shellcreepers[0].enemy.width = 12;
			level->shellcreepers[0].enemy.height = 16;
			level->shellcreepers[0].enemy.xSpeed = 7;
			level->shellcreepers[0].enemy.xMaxSpeed = 7;
			level->shellcreepers[0].enemy.isFalling = 0;
			level->shellcreepers[0].enemy.facing = 'L';
			level->shellcreepers[0].enemy.state = ENEMY_IN_PIPE;
			level->shellcreepers[0].enemy.timeTillSpawn = 0;
			level->shellcreepers[0].curFrame = level->shellcreepers[0].stillFrame;
			
			level->shellcreepers[1] = level->shellcreepers[0];
			level->shellcreepers[1].enemy.x = 48*4 - level->shellcreepers[1].enemy.width * 4;
			level->shellcreepers[1].enemy.facing = 'R';
			level->shellcreepers[1].enemy.timeTillSpawn = os_read_monotonic_time() + 300;
			
			level->shellcreepers[2] = level->shellcreepers[1];
			level->shellcreepers[2].enemy.timeTillSpawn = os_read_monotonic_time() + 900;
			
			level->shellcreepers[3] = level->shellcreepers[0];
			level->shellcreepers[3].enemy.timeTillSpawn = os_read_monotonic_time() + 1400; 
			break;
			
		case 3:
			selectLevelSprites(
				level,
				area,
				size,
				logFile
			);
		
			level->numOfShellcreepers = 0;
			level->numOfSidesteppers = 0;
			level->numOfCoins = 1;
			level->bonusLevel = 1;
			level->coins = (Coin*) malloc(level->numOfCoins * sizeof(Coin) + 10000);
			
			level->coins[0].x = 52*4;
			level->coins[0].y = 188*4;
			level->coins[0].width = 8;
			level->coins[0].height = 8;
			level->coins[0].lastFrame = 0;
			level->coins[0].collected = 0;
			level->coins[0].inactive = 0;
			selectCoinSprites(
				&(level->coins[0]),
				area,
				size,
				logFile
			);
			break;
			
		case 4:
			selectLevelSprites(
				level,
				area,
				size,
				logFile
			);
			
			level->numOfShellcreepers = 0;
			level->numOfSidesteppers = 4;
			level->numOfCoins = 0;
			if (level->sidesteppers)
			{
				level->sidesteppers = (Sidestepper*) realloc(level->sidesteppers, level->numOfSidesteppers * sizeof(Sidestepper) + 10000);
			}
			else
			{
				level->sidesteppers = (Sidestepper*) malloc(level->numOfSidesteppers * sizeof(Sidestepper) + 10000);
			}
			
			level->sidesteppers[0].enemy.x = 1024 - 48*4;
			level->sidesteppers[0].enemy.y = 178*4;
			level->sidesteppers[0].enemy.width = 16;
			level->sidesteppers[0].enemy.height = 16;
			level->sidesteppers[0].enemy.xSpeed = 7;
			level->sidesteppers[0].enemy.xMaxSpeed = 7;
			level->sidesteppers[0].enemy.isFalling = 0;
			level->sidesteppers[0].enemy.facing = 'L';
			level->sidesteppers[0].enemy.state = ENEMY_IN_PIPE;
			level->sidesteppers[0].angry = 0;
			level->sidesteppers[0].enemy.timeTillSpawn = 0;
			
			selectSidestepperSprites(
				&(level->sidesteppers[0]),
				area,
				size,
				logFile
			);
			
			level->sidesteppers[1] = level->sidesteppers[0];
			level->sidesteppers[1].enemy.x = 48*4 - level->sidesteppers[1].enemy.width * 4;
			level->sidesteppers[1].enemy.facing = 'R';
			level->sidesteppers[1].enemy.timeTillSpawn = os_read_monotonic_time() + 300;
			
			level->sidesteppers[2] = level->sidesteppers[1];
			level->sidesteppers[2].enemy.timeTillSpawn = os_read_monotonic_time() + 1000;
			
			level->sidesteppers[3] = level->sidesteppers[0];
			level->sidesteppers[3].enemy.timeTillSpawn = os_read_monotonic_time() + 1300;
			break;
			
		case 5:
			level->numOfShellcreepers = 2;
			level->numOfSidesteppers = 4;
			level->numOfCoins = 0;
			
			level->shellcreepers = (Shellcreeper*) realloc(level->shellcreepers, level->numOfShellcreepers * sizeof(Shellcreeper) + 10000);
			level->shellcreepers[0].enemy.x = 48*4 - level->shellcreepers[0].enemy.width * 4;
			level->shellcreepers[0].enemy.y = 178*4;
			level->shellcreepers[0].enemy.width = 12;
			level->shellcreepers[0].enemy.height = 16;
			level->shellcreepers[0].enemy.xSpeed = 7;
			level->shellcreepers[0].enemy.xMaxSpeed = 7;
			level->shellcreepers[0].enemy.isFalling = 0;
			level->shellcreepers[0].enemy.facing = 'R';
			level->shellcreepers[0].enemy.state = ENEMY_IN_PIPE;
			level->shellcreepers[0].enemy.timeTillSpawn = os_read_monotonic_time() + 1200;
			level->shellcreepers[0].curFrame = level->shellcreepers[0].stillFrame;
			
			level->shellcreepers[1] = level->shellcreepers[0];
			level->shellcreepers[1].enemy.timeTillSpawn = os_read_monotonic_time() + 1300;
			
			level->sidesteppers = (Sidestepper*) realloc(level->sidesteppers, level->numOfSidesteppers * sizeof(Sidestepper) + 10000);
			level->sidesteppers[0].enemy.x = 48*4 - level->sidesteppers[0].enemy.width * 4;
			level->sidesteppers[0].enemy.y = 178*4;
			level->sidesteppers[0].enemy.width = 12;
			level->sidesteppers[0].enemy.height = 16;
			level->sidesteppers[0].enemy.xSpeed = 7;
			level->sidesteppers[0].enemy.xMaxSpeed = 7;
			level->sidesteppers[0].enemy.isFalling = 0;
			level->sidesteppers[0].enemy.facing = 'R';
			level->sidesteppers[0].enemy.state = ENEMY_IN_PIPE;
			level->sidesteppers[0].angry = 0;
			level->sidesteppers[0].enemy.timeTillSpawn = 0;
			level->sidesteppers[0].curFrame = level->sidesteppers[0].walkFrames[0];
			
			level->sidesteppers[1] = level->sidesteppers[0];
			level->sidesteppers[1].enemy.x = 1024 - 48*4;
			level->sidesteppers[1].enemy.facing = 'L';
			level->sidesteppers[1].enemy.timeTillSpawn = os_read_monotonic_time() + 300;
			
			level->sidesteppers[2] = level->sidesteppers[1];
			level->sidesteppers[2].enemy.timeTillSpawn = os_read_monotonic_time() + 2600;
			
			level->sidesteppers[3] = level->sidesteppers[0];
			level->sidesteppers[2].enemy.timeTillSpawn = os_read_monotonic_time() + 2800;
			break;
	}
}

void getPlatRow(enum PlatRow *thisPlatRow, int i)
{
	switch (i)
	{
		case 0:
			*thisPlatRow = TOP_LEFT;
			break;
		case 1:
			*thisPlatRow = TOP_RIGHT;
			break;
		case 2:
			*thisPlatRow = MIDDLE_LEFT;
			break;
		case 3:
			*thisPlatRow = MIDDLE_RIGHT;
			break;
		case 4:
			*thisPlatRow = MIDDLE;
			break;
		case 5:
			*thisPlatRow = BOTTOM_LEFT;
			break;
		case 6:
			*thisPlatRow = BOTTOM_RIGHT;
			break;
	}
}

void updateHUDScore(HUD *hud, int score)
{
	for (int i = 0; i < 6; i++)
	{
		int digit = (int)(score / pow(10, i)) % 10;
		hud->scoreDisplayI[5 - i] = hud->font_numbers[digit];
	}
	
	if (score > hud->highScore || hud->highScore == 0)
	{
		hud->highScore = score;
		for (int i = 0; i < 6; i++)
		{
			int digit = (int)(hud->highScore / pow(10, i)) % 10;
			hud->scoreDisplayTop[5 - i] = hud->font_numbers[digit];
		}
	}
}

void increasePhaseNum(int *phaseNum, HUD *hud)
{
	*phaseNum += 1;
	
	if (*phaseNum < 10)
	{
		hud->phaseNumDisplay[0] = hud->font_numbers[*phaseNum];
	}
	else
	{
		int firstDigit = (int)(*phaseNum / 10) % 10;
		int secondDigit = (int)(*phaseNum) % 10;
		hud->phaseNumDisplay[0] = hud->font_numbers[firstDigit];
		hud->phaseNumDisplay[1] = hud->font_numbers[secondDigit];
	}
}

void updateCoin(Coin *coin)
{
	coin->frame++;
	
	if (coin->frame % 4 == 0 && coin->collected)
	{
		if (coin->lastFrame < 5)
		{
			coin->curFrame = coin->pickupFrames[coin->lastFrame++];
		}
		else
		{
			coin->inactive = 1;
		}
	}
	else if (coin->frame % 2 == 0 && !coin->collected)
	{
		if (coin->lastFrame < 5)
		{
			coin->curFrame = coin->spinFrames[coin->lastFrame++];
		}
		else
		{
			coin->curFrame = coin->spinFrames[0];
			coin->lastFrame = 0;
		}
		
	}
}
