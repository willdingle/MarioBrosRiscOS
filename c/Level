#include "Level.h"

#include "Sprites.h"
#include "Player.h"

#include <stdlib.h>
#include <math.h>
#include "oslib/os.h"

void initLevel(Level *level, Player *mario, osspriteop_area *area, int size, FILE *logFile)
{
	selectLevelSprites(
		level,
		area,
		size,
		logFile
	);
	
	mario->x = 150;
	mario->y = 16*4;
	mario->width = 16;
	mario->height = 24;
	mario->xSpeed = 0;
	mario->xAcc = 1;
	mario->xMaxSpeed = 12;
	mario->ySpeed = 0;
	mario->state = PLAYER_LIVING;
	mario->extraLives = 2;
	mario->score = 0;
	
	switch (level->levelNum)
	{
		case 1:
			level->numOfShellcreepers = 3;
			level->shellcreepers = (Shellcreeper*) malloc(level->numOfShellcreepers * sizeof(Shellcreeper) + 10000);
			level->shellcreepers[0].enemy.x = 1024 - 48*4;
			level->shellcreepers[0].enemy.y = 178*4;
			level->shellcreepers[0].enemy.width = 12;
			level->shellcreepers[0].enemy.height = 16;
			level->shellcreepers[0].enemy.xSpeed = 7;
			level->shellcreepers[0].enemy.xMaxSpeed = 7;
			level->shellcreepers[0].enemy.isFalling = 0;
			level->shellcreepers[0].enemy.facing = 'L';
			level->shellcreepers[0].enemy.state = ENEMY_IN_PIPE;
			level->shellcreepers[0].enemy.timeTillSpawn = 0;
			
			selectShellcreeperSprites(
				&(level->shellcreepers[0]),
				area,
				size,
				logFile
			);
			
			level->shellcreepers[1] = level->shellcreepers[0];
			level->shellcreepers[1].enemy.x = 48*4 - level->shellcreepers[1].enemy.width * 4;
			level->shellcreepers[1].enemy.facing = 'R';
			level->shellcreepers[1].enemy.timeTillSpawn = os_read_monotonic_time() + 300;
			
			level->shellcreepers[2] = level->shellcreepers[1];
			level->shellcreepers[2].enemy.x = 48*4 - level->shellcreepers[2].enemy.width * 4;
			level->shellcreepers[2].enemy.facing = 'R';
			level->shellcreepers[2].enemy.timeTillSpawn = os_read_monotonic_time() + 900;
			
			break;
	}
}

void getPlatRow(enum PlatRow *thisPlatRow, int i)
{
	switch (i)
	{
		case 0:
			*thisPlatRow = TOP_LEFT;
			break;
		case 1:
			*thisPlatRow = TOP_RIGHT;
			break;
		case 2:
			*thisPlatRow = MIDDLE_LEFT;
			break;
		case 3:
			*thisPlatRow = MIDDLE_RIGHT;
			break;
		case 4:
			*thisPlatRow = MIDDLE;
			break;
		case 5:
			*thisPlatRow = BOTTOM_LEFT;
			break;
		case 6:
			*thisPlatRow = BOTTOM_RIGHT;
			break;
	}
}

void updateHUDScore(HUD *hud, int score)
{
	for (int i = 0; i < 6; i++)
	{
		int digit = (int)(score / pow(10, i)) % 10;
		hud->scoreDisplayI[5 - i] = hud->font_numbers[digit];
	}
	
	if (score > hud->highScore || hud->highScore == 0)
	{
		hud->highScore = score;
		for (int i = 0; i < 6; i++)
		{
			int digit = (int)(hud->highScore / pow(10, i)) % 10;
			hud->scoreDisplayTop[5 - i] = hud->font_numbers[digit];
		}
	}
}