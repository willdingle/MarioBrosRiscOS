#include "Enemy.h"
#include "Level.h"

#include <stdio.h>

void updateShellcreeperAnimation(Shellcreeper *shellcreeper)
{
	Enemy *scInfo = &(shellcreeper->enemy);
	shellcreeper->frame++;
	
	if (shellcreeper->frame % 4 == 0)
	{
		if (scInfo->xSpeed == scInfo->xMaxSpeed && !scInfo->inHitState)
		{
			if (shellcreeper->curFrame == shellcreeper->walk0Frame || shellcreeper->curFrame == shellcreeper->walk1Frame)
				shellcreeper->curFrame = shellcreeper->stillFrame;
			else if (shellcreeper->curFrame == shellcreeper->stillFrame)
			{
				if (shellcreeper->lastWalk == 0)
				{
					shellcreeper->curFrame = shellcreeper->walk1Frame;
					shellcreeper->lastWalk = 1;
				}
				else
				{
					shellcreeper->curFrame = shellcreeper->walk0Frame;
					shellcreeper->lastWalk = 0;
				}
			}
		}
		else
		{
			if (shellcreeper->curFrame == shellcreeper->hit0Frame)
				shellcreeper->curFrame = shellcreeper->hit1Frame;
			else
				shellcreeper->curFrame = shellcreeper->hit0Frame;
		}
	}
}

void updateEnemy(Enemy *enemy, void *enemyChildPoint, enum EnemyType enemyType, Level *level, osspriteop_area *area, void *logFile)
{
	//Apply falling
	if (enemy->isFalling && !(enemy->inPipe))
	{
		enemy->ySpeed += -0.5;
		enemy->y += enemy->ySpeed;
	}
	
	//Movement
	if (!enemy->inHitState && !enemy->dying)
	{
		if (enemy->facing == 'L')
			enemy->x -= enemy->xSpeed;
		else if (enemy->facing == 'R')
			enemy->x += enemy->xSpeed;
	}
	else if (enemy->dying)
	{
		enemy->x += enemy->xSpeed;
	}
	
	//Animation
	if (!(enemy->isFalling))
	{
		switch (enemyType)
		{
			case SHELLCREEPER:
				updateShellcreeperAnimation((Shellcreeper*) enemyChildPoint);
				break;
		}
		
	}
	
	//Platform collision
	if (!enemy->dying)
	{
		enemyPlatCollision(enemy, enemyChildPoint, enemyType, level, logFile);
	}
	
	//Check if walked off platform
	if (!(enemy->isFalling) && !(enemy->isOnPlat) && enemy->y + 16*4 > 1)
	{
		enemy->isFalling = 1;
		enemy->ySpeed = -6.0;
	}
	
	//Check if on ground level, in a pipe or other
	int enY = (int) (enemy->y);
	switch (enY)
	{
		//Ground
		case 16*4:
			//Left pipe check
			if (enemy->facing == 'L' && enemy->x <= 32*4)
			{
				enemy->y = 24*4;
				enemy->inPipe = 1;
			}
			//Right pipe check
			else if (enemy->facing == 'R' && enemy->x + (enemy->width * 4) >= 1024 - 32*4)
			{
				enemy->y = 24*4;
				enemy->inPipe = 1;
			}
			break;
		
		//In pipe
		case 24*4:
			//Left pipe
			if (enemy->facing == 'L' && enemy->x + (enemy->width * 4) < 32*4)
			{
				enemy->x = 48*4;
				enemy->y = 178*4;
				enemy->facing = 'R';
				enemy->isFalling = 1;
				enemy->inPipe = 0;
			}
			//Right pipe
			else if (enemy->facing == 'R' && enemy->x > 1024 - 32*4)
			{
				enemy->x = 1024 - 48*4 - enemy->width * 4;
				enemy->y = 178*4;
				enemy->facing = 'L';
				enemy->isFalling = 1;
				enemy->inPipe = 0;
			}
			break;
			
		//Other
		default:
			//Bounds - wrap around to other side when going off left or right side of screen
			if (enemy->facing == 'L' && enemy->x + 12 * 4 < 0)
			{
				enemy->x = 1024;
			}
			else if (enemy->facing == 'R' && enemy->x > 1024)
			{
				enemy->x = 0 - 16*4;
			}
			break;
	}
	
	//Make shellcreeper dead when it as a whole reaches or goes below y = 0
	if (enemy->y + enemy->height * 4 <= 0 && enemy->dying)
	{
		enemy->dying = 0;
		enemy->dead = 1;
	}
}

void enemyPlatCollision(Enemy *enemy, void *enemyChildPoint, enum EnemyType enemyType, Level *level, void *logFile)
{
	float objX = enemy->x;
	float objY = enemy->y;
	float objWidth = enemy->width * 4;
	float objHeight = enemy->height * 4;
	
	//fprintf((FILE*) logFile, "%f,\t%f,\t%f,\t%f\n", objX, objY, objWidth, objHeight);
	
	int onPlatDetected = 0;

	for (int i = 0; i < 8; i++)
	{
		float platX = level->plats[i].x;
		float platY = level->plats[i].y;
		float platWidth = level->plats[i].width;
		float platHeight = level->plats[i].height;
		
		//Downwards y platform collision
		if ((objX <= platX + platWidth && objX + objWidth >= platX && objY <= platY + platHeight && objY >= platY) && !(enemy->ySpeed > 0))
		{
			enemy->y = platY + platHeight;
			enemy->ySpeed = 0;
			enemy->isFalling = 0;
			enemy->isOnPlat = 1;
			onPlatDetected = 1;
			
			//Check if this platform has been hit
			enum PlatRow thisPlatRow;
			getPlatRow(&thisPlatRow, i);
			if (thisPlatRow == level->platRow)
			{
				float midOfSc = (objX + (objX + objWidth)) / 2;
				int thisPlatSquare = (int) ((midOfSc - level->plats[i].x) / level->platSize / 4);
				if (thisPlatSquare == level->platSquare)
				{
					fprintf((FILE*)logFile, "Enemy hit\n");
					enemy->inHitState = 1;
					
					enemy->ySpeed = 5.0;
					enemy->isFalling = 1;
					switch (enemyType)
					{
						case SHELLCREEPER:
							
							((Shellcreeper*) enemyChildPoint)->curFrame = ((Shellcreeper*) enemyChildPoint)->hit0Frame;
							break;
					}
				}
			}
		}
	}
	
	//Update if object is on platform
	if (enemy->isOnPlat && !onPlatDetected)
	{
		enemy->isOnPlat = 0;
	}
}