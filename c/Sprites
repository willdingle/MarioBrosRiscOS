#include "Sprites.h"

#include "oslib/osfile.h"

#include <stdlib.h>

osspriteop_area* loadSpriteFile(const char *filename, int *sizePoint, FILE *logFile)
{
	int size;
	bits type;
	
	fileswitch_object_type objType;
	
	xosfile_read_stamped_no_path(
		filename,
		&objType,
		NULL,
		NULL,
		&size,
		NULL,
		&type
	);
	fprintf(logFile, "sprite file size = %d\n", size);
	fflush(logFile);
	
	size += sizeof(int);
	osspriteop_area *area = malloc(size);
	
	area->size = size;
	area->first = 16;
	
	xosspriteop_load_sprite_file(
		osspriteop_USER_AREA,
		area,
		filename
	);
	
	fprintf(logFile, "Loading sprites finished!\n");
	fflush(logFile);
	
	*sizePoint = size;
	
	return area;
}

void selectCoinSprites(
	Coin *coin,
	osspriteop_area *area,
	int size,
	FILE *logFile
)
{
	for (int i = 0; i < 5; i++)
	{
		char spriteName[20];
		snprintf(spriteName, 20, "coin_spin%i", i);
		
		//Spin frames
		os_error *e = xosspriteop_select_sprite(
			osspriteop_USER_AREA,
			area,
			(osspriteop_id) spriteName,
			&(coin->spinFrames[i])
		);

		if (e != NULL)
		{
			fprintf(logFile, "selecting %s failed\n"
			"   errnum = %d: message = '%s'\n", spriteName, e->errnum, e->errmess);
			fflush(logFile);
		}
		
		//Pickup frames
		snprintf(spriteName, 20, "coin_pickup%i", i);
		
		e = xosspriteop_select_sprite(
			osspriteop_USER_AREA,
			area,
			(osspriteop_id) spriteName,
			&(coin->pickupFrames[i])
		);

		if (e != NULL)
		{
			fprintf(logFile, "selecting %s failed\n"
			"   errnum = %d: message = '%s'\n", spriteName, e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	coin->curFrame = coin->spinFrames[0];
}

void selectHUDSprites(
	HUD *hud,
	osspriteop_area *area,
	int size,
	FILE *logFile
)
{
	//Main menu
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "main_menu",
		&(hud->main_menu)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting main_menu failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Font
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_0",
		&(hud->font_numbers[0])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_1",
		&(hud->font_numbers[1])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_2",
		&(hud->font_numbers[2])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_2 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_3",
		&(hud->font_numbers[3])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_3 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_4",
		&(hud->font_numbers[4])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_4 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_5",
		&(hud->font_numbers[5])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_5 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_6",
		&(hud->font_numbers[6])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_6 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_7",
		&(hud->font_numbers[7])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_7 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_8",
		&(hud->font_numbers[8])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_8 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "font_9",
		&(hud->font_numbers[9])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting font_9 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Mario HUD
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_hud",
		&(hud->mario_hud)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_hud failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Points I
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "points_i",
		&(hud->points_i)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting points_i failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Points top
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "points_top",
		&(hud->points_top)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting points_top failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Game over text
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "game_over",
		&(hud->game_over_text)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting game_over failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Phase
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "p_equals",
		&(hud->p_equals)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting p_equals failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
}

void selectLevelSprites(
	Level *level,
	osspriteop_area *area,
	int size,
	FILE *logFile
)
{
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "floor",
		&(level->floor)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting floor failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "pipe_bottom",
		&(level->pipeBottom)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting pipe_bottom failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "pipe_top",
		&(level->pipeTop)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting pipe_top failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Load platform tiles
	osspriteop_id platId;
	osspriteop_id platMoveFrameIds[3];
	
	switch(level->levelNum)
	{
		case 1:
			platId = (osspriteop_id) "plat_blue";
			platMoveFrameIds[0] = (osspriteop_id) "plat_blue1";
			platMoveFrameIds[1] = (osspriteop_id) "plat_blue2";
			platMoveFrameIds[2] = (osspriteop_id) "plat_blue3";
			break;
			
		case 3:
			platId = (osspriteop_id) "plat_smooth";
			platMoveFrameIds[0] = (osspriteop_id) "plat_smooth1";
			platMoveFrameIds[1] = (osspriteop_id) "plat_smooth2";
			platMoveFrameIds[2] = (osspriteop_id) "plat_smooth3";
			break;
			
		case 4:
			platId = (osspriteop_id) "plat_bumpy";
			platMoveFrameIds[0] = (osspriteop_id) "plat_bumpy1";
			platMoveFrameIds[1] = (osspriteop_id) "plat_bumpy2";
			platMoveFrameIds[2] = (osspriteop_id) "plat_bumpy3";
			break;
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		platId,
		&(level->platTile)
	);
	
	if (e != NULL)
	{
		fprintf(logFile, "selecting platform %d failed\n"
		"   errnum = %d: message = '%s'\n", platId, e->errnum, e->errmess);
		fflush(logFile);
	}
	
	for (int i = 0; i < 3; i++)
	{
		e = xosspriteop_select_sprite(
			osspriteop_USER_AREA,
			area,
			platMoveFrameIds[i],
			&(level->platMoveFrames[i])
		);
		
		if (e != NULL)
		{
			fprintf(logFile, "selecting platform move frame %d failed\n"
			"   errnum = %d: message = '%s'\n", i + 1, e->errnum, e->errmess);
			fflush(logFile);
		}
	}
	
	fprintf(logFile, "all level sprites selected\n");
	fflush(logFile);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		platId,
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	if (level->transTab)
	{
		free(level->transTab);
	}
	
	level->transTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		platId,
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		level->transTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
}

void selectSidestepperSprites(
	Sidestepper *sidestepper,
	osspriteop_area *area,
	int size,
	FILE *logFile
)
{
	//Walk frames
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_walk0",
		&(sidestepper->walkFrames[0])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_walk0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_walk1",
		&(sidestepper->walkFrames[1])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_walk1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_walk2",
		&(sidestepper->walkFrames[2])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_walk2 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Run frames
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_run0",
		&(sidestepper->runFrames[0])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_run0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_run1",
		&(sidestepper->runFrames[1])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_run1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_run2",
		&(sidestepper->runFrames[2])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_run2 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//Hit frames
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_hit0",
		&(sidestepper->hitFrames[0])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_hit0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "ss_hit1",
		&(sidestepper->hitFrames[1])
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting ss_hit1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "ss_walk0",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	sidestepper->transTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "ss_walk0",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		sidestepper->transTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	sidestepper->curFrame = sidestepper->walkFrames[0];
	sidestepper->frame = 0;
	sidestepper->lastWalk = 1;
}

void selectShellcreeperSprites(
	Shellcreeper *shellcreeper,
	osspriteop_area *area,
	int size,
	FILE *logFile
)
{
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_still",
		&(shellcreeper->stillFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_still failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_walk0",
		&(shellcreeper->walk0Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_walk0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_walk1",
		&(shellcreeper->walk1Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_walk1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_hit0",
		&(shellcreeper->hit0Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_walk1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_hit1",
		&(shellcreeper->hit1Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_walk1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "sc_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	shellcreeper->transTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "sc_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		shellcreeper->transTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	shellcreeper->curFrame = shellcreeper->stillFrame;
	shellcreeper->frame = 0;
	shellcreeper->lastWalk = 1;
}

void selectPlayerSprites(
	Player *mario,
	const char *spriteName,
	const int numOfFrames,
	osspriteop_area *area,
	int size,
	os_factors *factors,
	int xEigFactor,
	int yEigFactor,
	FILE *logFile
)
{
	/*
	// Allocate arrays for headers and transition tables
	sprite->headers = malloc(numOfFrames * sizeof(osspriteop_header*));
	sprite->transTabs = malloc(numOfFrames * sizeof(osspriteop_trans_tab*));
	char *frameNameTemp;
	sprintf(frameNameTemp, "%s%d", spriteName, i);
	const char *frameName = frameNameTemp;
	fprintf(logFile, "Sprite name: %s\n", frameName);
	fflush(logFile);
	*/
	
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_still",
		&(mario->stillFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_still failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_run0",
		&(mario->run0Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_run0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_acc",
		&(mario->accFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_acc failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_run1",
		&(mario->run1Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_run1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_jump",
		&(mario->jumpFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_jump failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_hit",
		&(mario->hitFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_hit failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_dying",
		&(mario->dyingFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_dying failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "resp_plat0",
		&(mario->respPlat)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting resp_plat0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	} 
	
	//factors->xmul = 1<<(xEigFactor - 1);
	//factors->ymul = 1<<(yEigFactor);
	factors->xmul = 2;
	factors->ymul = 2;
	factors->xdiv = 1;
	factors->ydiv = 1;
	
	//Trans tab for most player sprites
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "mario_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	mario->mainTransTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "mario_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		mario->mainTransTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	//Trans tab for jump sprite
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "mario_jump",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	mario->jumpTransTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "mario_jump",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		mario->jumpTransTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	mario->curFrame = mario->stillFrame;
	mario->curTransTab = mario->mainTransTab;
	mario->facing = 'R';
	mario->frame = 0;
}