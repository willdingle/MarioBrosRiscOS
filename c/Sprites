#include "Sprites.h"

#include "oslib/osfile.h"

#include <stdlib.h>

osspriteop_area* loadSpriteFile(const char *filename, int *sizePoint, FILE *logFile)
{
	int size;
	bits type;
	
	fileswitch_object_type objType;
	
	xosfile_read_stamped_no_path(
		filename,
		&objType,
		NULL,
		NULL,
		&size,
		NULL,
		&type
	);
	fprintf(logFile, "sprite file size = %d\n", size);
	fflush(logFile);
	
	size += sizeof(int);
	osspriteop_area *area = malloc(size);
	
	area->size = size;
	area->first = 16;
	
	xosspriteop_load_sprite_file(
		osspriteop_USER_AREA,
		area,
		filename
	);
	
	fprintf(logFile, "Loading sprites finished!\n");
	fflush(logFile);
	
	*sizePoint = size;
	
	return area;
}

void selectShellcreeperSprites(
	Shellcreeper *shellcreeper,
	osspriteop_area *area,
	int size,
	FILE *logFile
)
{
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_still",
		&(shellcreeper->stillFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_still failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_walk0",
		&(shellcreeper->walk0Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_walk0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "sc_walk1",
		&(shellcreeper->walk1Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting sc_walk1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "sc_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	shellcreeper->transTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "sc_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		shellcreeper->transTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	shellcreeper->curFrame = shellcreeper->stillFrame;
	shellcreeper->facing = 'L';
	shellcreeper->frame = 0;
	shellcreeper->lastWalk = 1;
}

void selectPlayerSprites(
	Player *mario,
	const char *spriteName,
	const int numOfFrames,
	osspriteop_area *area,
	int size,
	os_factors *factors,
	int xEigFactor,
	int yEigFactor,
	FILE *logFile
)
{
	/*
	// Allocate arrays for headers and transition tables
	sprite->headers = malloc(numOfFrames * sizeof(osspriteop_header*));
	sprite->transTabs = malloc(numOfFrames * sizeof(osspriteop_trans_tab*));
	char *frameNameTemp;
	sprintf(frameNameTemp, "%s%d", spriteName, i);
	const char *frameName = frameNameTemp;
	fprintf(logFile, "Sprite name: %s\n", frameName);
	fflush(logFile);
	*/
	
	os_error *e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_still",
		&(mario->stillFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_still failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_run0",
		&(mario->run0Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_run0 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_acc",
		&(mario->accFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_acc failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_run1",
		&(mario->run1Frame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_run1 failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	e = xosspriteop_select_sprite(
		osspriteop_USER_AREA,
		area,
		(osspriteop_id) "mario_jump",
		&(mario->jumpFrame)
	);

	if (e != NULL)
	{
		fprintf(logFile, "selecting mario_jump failed\n"
		"   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
		fflush(logFile);
	}
	
	//factors->xmul = 1<<(xEigFactor - 1);
	//factors->ymul = 1<<(yEigFactor);
	factors->xmul = 2;
	factors->ymul = 2;
	factors->xdiv = 1;
	factors->ydiv = 1;
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "mario_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		NULL,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #1 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	fprintf(logFile, "colourtrans table size = %d\n", size);
	fflush(logFile);
	
	mario->transTab = malloc(size);
	
	e = xcolourtrans_generate_table_for_sprite(
		area,
		(osspriteop_id) "mario_still",
		os_CURRENT_MODE,
		colourtrans_CURRENT_PALETTE,
		mario->transTab,
		colourtrans_CURRENT_IF_ABSENT | colourtrans_RETURN_WIDE_ENTRIES,
		NULL,
		NULL,
		&size
	);
	
	if (e != NULL)
	{
	   fprintf(logFile, "xcolourtrans_generate_table #2 failed\n"
	   "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
	   fflush(logFile);
	}
	
	mario->curFrame = mario->stillFrame;
	mario->facing = 'R';
	mario->frame = 0;
}