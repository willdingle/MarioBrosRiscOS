#include "Player.h"

#include "oslib/osbyte.h"
#include "Level.h"

GameInfo gameInfo = {.gravity = -0.98};
KeyCodes keys = {.left=25, .right=121, .x=66, .enter=73};

void enemyCollision(Player *mario, Level *level, enum GameState *gameState, FILE *logFile)
{
	float marX = mario->x;
	float marY = mario->y;
	float marWidth = mario->width * 4;
	float marHeight = mario->height * 4;
	
	for (int i = 0; i < level->numOfShellcreepers; i++)
	{
		Enemy *scInfo = &(level->shellcreepers[i].enemy);
		float scX = scInfo->x;
		float scY = scInfo->y;
		float scWidth = scInfo->width * 4;
		float scHeight = scInfo->height * 4;
		
		//fprintf(logFile, "x: %f, y: %f, width: %f, height: %f\n", scX, scY, scWidth, scHeight);
		//fprintf(logFile, "xSpeed: %f\n", level->shellcreepers[i].xSpeed);
		
		//Check for enemy collision
		if (scX <= marX + marWidth && scX >= marX && scY <= marY + marHeight && scY + scHeight >= marY
			|| scX + scWidth > marX && scX + scWidth < marX + marWidth && scY <= marY + marWidth && scY + scHeight >= marY)
		{
			//If enemy is in its living state, mario becomes hit
			if (scInfo->state == ENEMY_LIVING)
			{
				fprintf(logFile, "Enemy collision!\n");
				fflush(logFile);
				mario->curFrame = mario->hitFrame;
				mario->state = PLAYER_HIT;
				mario->hitTime = 0;
			}
			//If enemy is in its hit state, enemy starts dying
			else if (scInfo->state == ENEMY_HIT)
			{
				scInfo->state = ENEMY_DYING;
				scInfo->isFalling = 1;
				fprintf(logFile, "%c", mario->facing);
				fflush(logFile);
				if (mario->facing == 'L')
					scInfo->xSpeed = -20.0;
				else
					scInfo->xSpeed = 20.0;
				mario->score += 800;
			}
			
		}
	}
}

void platCollision(Player *mario, Level *level, int oldX, int oldY, FILE *logFile)
{
	float marX = mario->x;
	float marY = mario->y;
	float marWidth = mario->width * 4;
	float marHeight = mario->height * 4;
	
	int onPlatDetected = 0;
	
	for (int i = 0; i < 8; i++)
	{
		float platX = level->plats[i].x;
		float platY = level->plats[i].y;
		float platWidth = level->plats[i].width;
		float platHeight = level->plats[i].height;
		
		int colX = 0;
		int colY = 0;
		
		//Leftwards and rightwards x
		if (mario->xSpeed < 0)
			if (marX <= platX + platWidth && marX >= platX && marY <= platY + platWidth && marY + marHeight >= platY)
			{
				colX = 1;
				mario->x = oldX;
				mario->xSpeed = 0;
			}
		else if (mario->xSpeed > 0)
			if (marX + marWidth > platX && marX + marWidth < platX + platWidth && marY <= platY + platWidth && marY + marHeight >= platY)
			{
				colX = 1;
				mario->x = oldX;
				mario->xSpeed = 0;
			}
		
		//Downwards and upwards y
		if ((marX <= platX + platWidth && marX + marWidth >= platX && marY <= platY + platHeight && marY >= platY) && !(mario->ySpeed > 0))
		{
			colY = 1;
			mario->y = platY + platHeight;
			mario->ySpeed = 0;
			mario->isJumping = 0;
			mario->isOnPlat = 1;
			onPlatDetected = 1;
		}
		else if (mario->ySpeed > 0)
			if (marX <= platX + platWidth && marX + marWidth >= platX && marY + marHeight >= platY && marY + marHeight <= platY + platHeight)
			{
				colY = 1;
				mario->y = oldY;
				mario->ySpeed = 0;
				calcPlatHit(mario, level, i, logFile);
			}
			
		
	}
	
	//Update if mario is on platform
	if (mario->isOnPlat && !onPlatDetected)
	{
		mario->isOnPlat = 0;
	}
}

void calcPlatHit(Player *mario, Level *level, int i, FILE *logFile)
{
	getPlatRow(&(level->platRow), i);
	float midOfMario = (mario->x + (mario->x + mario->width * 4)) / 2;
	level->platSquare = (int) ((midOfMario - level->plats[i].x) / level->platSize / 4);
	
	fprintf(logFile, "Platsq hit: %i, Num of platsqs: %i\n", level->platSquare, level->plats[i].numOfSquares);
	if (level->platSquare < 0 || level->platSquare > level->plats[i].numOfSquares - 1)
	{
		level->platRow = NOT_HIT;
		level->platSquare = 0;
	}
	else
	{
		fprintf(logFile, "Plat square hit: %i\n", level->platSquare);
		fflush(logFile);
	}
}

void updatePlayerAnimation(Player *mario)
{
	mario->frame++;
		
	if (mario->frame%1 == 0)
	{
		//If accelerating, switch between 3 frames
		if (mario->xSpeed > 0 && mario->xSpeed < mario->xMaxSpeed)
		{
			if (mario->curFrame == mario->run0Frame)
				mario->curFrame = mario->accFrame;
			else if (mario->curFrame == mario->accFrame)
				mario->curFrame = mario->run1Frame;
			else
				mario->curFrame = mario->run0Frame;
		}
		//If at full speed, switch between 2 frames
		else if (mario->xSpeed == mario->xMaxSpeed)
		{
			if (mario->curFrame == mario->run0Frame)
				mario->curFrame = mario->run1Frame;
			else
				mario->curFrame = mario->run0Frame;
		}
	}
}

void updatePlayer(Player *mario, Level *level, osspriteop_area *area, enum GameState *gameState, FILE *logFile)
{
	switch (mario->state)
	{
		case PLAYER_LIVING:
			updatePlayerPlaying(mario, level, area, gameState, logFile);
			break;
			
		case PLAYER_HIT:
			mario->hitTime += 1;
			if (mario->hitTime >= 120/4)
			{
				mario->state = PLAYER_DYING;
				mario->curFrame = mario->dyingFrame;
				mario->ySpeed = 22.0;
				mario->hitTime = 0;
			}
			break;
			
		case PLAYER_DYING:
			mario->hitTime += 1;
			mario->ySpeed += gameInfo.gravity;
			mario->y += mario->ySpeed;
			//fprintf(logFile, "mario y: %f\n mario state: %i\n\n", mario->y, mario->state);
			//fflush(logFile);
			
			if ((mario->y + mario->height * 4) < 0)
			{
				mario->x = 108*4;
				mario->y = 896 + 8*4;
				mario->ySpeed = -3;
				mario->state = PLAYER_RESPAWNING;
				mario->curFrame = mario->stillFrame;
				mario->curTransTab = mario->mainTransTab;
				mario->extraLives -= 1;
			}
			break;
			
		case PLAYER_RESPAWNING:
			mario->y += mario->ySpeed;
			if (mario->y < 184*4)
			{
				mario->y = 184*4;
				
				int leftPressed;
				int rightPressed;
				
				os_byte(
					osbyte_SCAN_KEYBOARD,
					keys.right ^ 0x80,
					0,
					&rightPressed,
					NULL
				);
				
				os_byte(
					osbyte_SCAN_KEYBOARD,
					keys.left ^ 0x80,
					0,
					&leftPressed,
					NULL
				);
				
				if (leftPressed || rightPressed)
				{
					mario->isJumping = 1;
					mario->state = PLAYER_LIVING;
				}
			}
			break;
	}		
}

void updatePlayerPlaying(Player *mario, Level *level, osspriteop_area *area, enum GameState *gameState, FILE *logFile)
{
	int leftPressed;
	int rightPressed;
	int xPressed;
	int keyPressed = 0;
	float oldX = mario->x;
	float oldY = mario->y;
	
	//Checks whether left arrow, right arrow and X have been pressed
	os_byte(
		osbyte_SCAN_KEYBOARD,
		keys.left ^ 0x80,
		0,
		&leftPressed,
		NULL
	);
	
	os_byte(
		osbyte_SCAN_KEYBOARD,
		keys.right ^ 0x80,
		0,
		&rightPressed,
		NULL
	);
	
	os_byte(
		osbyte_SCAN_KEYBOARD,
		keys.x ^ 0x80,
		0,
		&xPressed,
		NULL
	);
	
	//Left arrow - move left
	if (leftPressed)
	{
		if (mario->xSpeed < mario->xMaxSpeed)
			mario->xSpeed += mario->xAcc;
		if (mario->xSpeed > mario->xMaxSpeed)
			mario->xSpeed = mario->xMaxSpeed;
		
		mario->x -= mario->xSpeed;
		
		if (mario->facing == 'R')
		{
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_still");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run0");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_acc");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run1");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_jump");
			mario->facing = 'L';
		}
		keyPressed = 1;
	}
		
	//Right arrow - move right
	if (rightPressed)
	{
		if (mario->xSpeed < mario->xMaxSpeed)
			mario->xSpeed += mario->xAcc;
		if (mario->xSpeed > mario->xMaxSpeed)
			mario->xSpeed = mario->xMaxSpeed;
		
		mario->x += mario->xSpeed;
		
		if (mario->facing == 'L')
		{
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_still");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run0");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_acc");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run1");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_jump");
			mario->facing = 'R';
		}
		keyPressed = 1;
	}
			
	//X - jump
	if (xPressed && !(mario->isJumping))
	{
		mario->ySpeed = 22.0;
		keyPressed = 1;
		mario->isJumping = 1;
		mario->curFrame = mario->jumpFrame;
		mario->curTransTab = mario->jumpTransTab;
	}
	
	//Check if walked off platform
	if (!(mario->isJumping) && !(mario->isOnPlat) && mario->y + 16*4 > 1)
	{
		mario->isJumping = 1;
		mario->ySpeed = -6.0;
	}
	
	//Apply jump / fall
	if (mario->isJumping)
	{
		mario->ySpeed += gameInfo.gravity;
		mario->y += mario->ySpeed;
	}
	
	//Update animation if key pressed, reset animation if not
	if (keyPressed && !(mario->isJumping))
	{
		updatePlayerAnimation(mario);
	}
	else if (!(mario->isJumping))
	{
		mario->curFrame = mario->stillFrame;
		mario->curTransTab = mario->mainTransTab;
		mario->frame = 0;
		mario->xSpeed = 0;
	}
	
	//Platform collision
	platCollision(mario, level, oldX, oldY, logFile);
	
	//Enemy collision
	enemyCollision(mario, level, gameState, logFile);
	
	//Bounds - uses width, height and scaling factor
	//Wrap around to other side when going off left or right side of screen
		//NOTE: for some reason using scale factor 4 in the bound collisions works, despite
		//using scale factor 2 with the sprites. X bound seems exact, Y bound slightly off
	if (mario->x + 16*4 < 0)
		mario->x = 1024;
	else if (mario->x > 1024)
		mario->x = 0 - 16*4;
	/*
	if (mario->y < (16*4))
	{
		mario->isJumping = 0;
		mario->y = 16*4;
		mario->curFrame = mario->stillFrame;
		mario->curTransTab = mario->mainTransTab;
	}
	else if ((mario->y + 24 * 4) > 896)
		mario->y = (896 - 24 * 4);
	*/
}