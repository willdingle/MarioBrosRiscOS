#include "Player.h"

#include "oslib/osbyte.h"

KeyCodes keys = {.left=25, .right=121, .x=66};
GameInfo gameInfo = {.gravity = -0.35};

void platCollision(Player *mario, Level *level, int oldX, int oldY)
{
	float marX = mario->x;
	float marY = mario->y;
	float marWidth = mario->width * 4;
	float marHeight = mario->height * 4;
	
	int onPlatDetected = 0;
	
	for (int i = 0; i < 7; i++)
	{
		float platX = level->plats[i].x;
		float platY = level->plats[i].y;
		float platWidth = level->plats[i].width;
		float platHeight = level->plats[i].height;
		
		int colX = 0;
		int colY = 0;
		
		//Downwards and upwards y
		if (marX <= platX + platWidth && marX + marWidth >= platX && marY <= platY + platHeight && marY >= platY)
		{
			colY = 1;
			mario->y = oldY + 1;
			mario->ySpeed = 0;
			mario->isJumping = 0;
			mario->isOnPlat = 1;
			onPlatDetected = 1;
		}
		else if (mario->ySpeed > 0)
			if (marX <= platX + platWidth && marX + marWidth >= platX && marY + marHeight >= platY && marY + marHeight <= platY + platHeight)
			{
				colY = 1;
				mario->y = oldY;
				mario->ySpeed = 0;
			}
			
		//Leftwards and rightwards x
		if (mario->xSpeed < 0)
			if (marX <= platX + platWidth && marX >= platX && marY <= platY + platWidth && marY + marHeight >= platY)
			{
				colX = 1;
				mario->x = oldX;
				mario->xSpeed = 0;
			}
		else if (mario->xSpeed > 0)
			if (marX + marWidth > platX && marX + marWidth < platX + platWidth && marY <= platY + platWidth && marY + marHeight >= platY)
			{
				colX = 1;
				mario->x = oldX;
				mario->xSpeed = 0;
			}
	}
	
	//Update if mario is on platform
	if (mario->isOnPlat && !onPlatDetected)
	{
		mario->isOnPlat = 0;
	}
}

void updatePlayerAnimation(Player *mario)
{
	mario->frame++;
		
	if (mario->frame%2 == 0)
	{
		//If accelerating, switch between 3 frames
		if (mario->xSpeed > 0 && mario->xSpeed < mario->xMaxSpeed)
		{
			if (mario->curFrame == mario->run0Frame)
				mario->curFrame = mario->accFrame;
			else if (mario->curFrame == mario->accFrame)
				mario->curFrame = mario->run1Frame;
			else
				mario->curFrame = mario->run0Frame;
		}
		//If at full speed, switch between 2 frames
		else if (mario->xSpeed == mario->xMaxSpeed)
		{
			if (mario->curFrame == mario->run0Frame)
				mario->curFrame = mario->run1Frame;
			else
				mario->curFrame = mario->run0Frame;
		}
	}
}

void updatePlayer(Player *mario, Level *level, osspriteop_area *area)
{
	int leftPressed;
	int rightPressed;
	int xPressed;
	int keyPressed = 0;
	float oldX = mario->x;
	float oldY = mario->y;
	
	//Checks whether left arrow, right arrow and X have been pressed
	os_byte(
		osbyte_SCAN_KEYBOARD,
		keys.left ^ 0x80,
		NULL,
		&leftPressed,
		NULL
	);
	
	os_byte(
		osbyte_SCAN_KEYBOARD,
		keys.right ^ 0x80,
		NULL,
		&rightPressed,
		NULL
	);
	
	os_byte(
		osbyte_SCAN_KEYBOARD,
		keys.x ^ 0x80,
		NULL,
		&xPressed,
		NULL
	);
	
	//Left arrow - move left
	if (leftPressed)
	{
		if (mario->xSpeed < mario->xMaxSpeed)
			mario->xSpeed += mario->xAcc;
		if (mario->xSpeed > mario->xMaxSpeed)
			mario->xSpeed = mario->xMaxSpeed;
		
		mario->x -= mario->xSpeed;
		
		if (mario->facing == 'R')
		{
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_still");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run0");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_acc");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run1");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_jump");
			mario->facing = 'L';
		}
		keyPressed = 1;
	}
		
	//Right arrow - move right
	if (rightPressed)
	{
		if (mario->xSpeed < mario->xMaxSpeed)
			mario->xSpeed += mario->xAcc;
		if (mario->xSpeed > mario->xMaxSpeed)
			mario->xSpeed = mario->xMaxSpeed;
		
		mario->x += mario->xSpeed;
		
		if (mario->facing == 'L')
		{
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_still");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run0");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_acc");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_run1");
			osspriteop_flip_about_yaxis(osspriteop_USER_AREA, area, (osspriteop_id) "mario_jump");
			mario->facing = 'R';
		}
		keyPressed = 1;
	}
			
	//X - jump
	if (xPressed && !(mario->isJumping))
	{
		mario->ySpeed = 12.0;
		keyPressed = 1;
		mario->isJumping = 1;
		mario->curFrame = mario->jumpFrame;
		mario->curTransTab = mario->jumpTransTab;
	}
	
	//Platform collision
	platCollision(mario, level, oldX, oldY);
	
	//Apply jump / fall
	if (mario->isJumping)
	{
		mario->ySpeed += gameInfo.gravity;
		mario->y += mario->ySpeed;
	}
	
	//Update animation if key pressed, reset animation if not
	if (keyPressed && !(mario->isJumping))
	{
		updatePlayerAnimation(mario);
	}
	else if (!(mario->isJumping))
	{
		mario->curFrame = mario->stillFrame;
		mario->frame = 0;
		mario->xSpeed = 0;
	}
	
	//Bounds - uses width, height and scaling factor
	//Wrap around to other side when going off left or right side of screen
		//NOTE: for some reason using scale factor 4 in the bound collisions works, despite
		//using scale factor 2 with the sprites. X bound seems exact, Y bound slightly off
	if (mario->x + 16*4 < 0)
		mario->x = 1024;
	else if (mario->x > 1024)
		mario->x = 0 - 16*4;
	if (mario->y < (16*4))
	{
		mario->isJumping = 0;
		mario->y = 16*4;
		mario->curFrame = mario->stillFrame;
		mario->curTransTab = mario->mainTransTab;
	}
	else if ((mario->y + 24 * 4) > 896)
		mario->y = (896 - 24 * 4);
	
	
}