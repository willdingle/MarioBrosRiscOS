#include "Window.h"
#include "Sprites.h"
#include "Player.h"
#include "Enemy.h"
#include "Level.h"

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "oslib/osbyte.h"

#define WIN_NUM_BUF_SIZE 12

wimp_t task;
wimp_event_no event;
wimp_block *block;
osbool QUIT = FALSE;
osbool more;
osbool windowOpen;
wimp_window *window;
wimp_window_state state;
wimp_w winHandle;
wimp_caret caret;
int context = 0;
int used, data_used;
char *data;

osspriteop_area *area;
Player mario;
Level level;
HUD hud;
enum GameState gameState = MAIN_MENU;
os_factors factors;
int size;

FILE *logFile;

//********** SCREEN MODE INFO **********
typedef union
{        
   int numbers[14];

   struct
   {    
      int modeFlags,
		  scrRCol,
		  scrBRow,
		  nColour,
		  xEigFactor,
		  yEigFactor,
		  lineLength,  
		  screenSize,
		  yShiftSize,
		  log2bpp,
		  log2bpc,
		  xWindLimit,
		  yWindLimit,
		  minScreenBanks;
   }
   info;
}
ModeInfo;                                 

ModeInfo modeInfo;

void updateModeInfo()
{                                      
   for (int i = 0; i < 15; i++)
   {
	   modeInfo.numbers[i] = i;
   }

   modeInfo.numbers[14] = -1;

   os_error *e = xos_read_vdu_variables(
		(os_vdu_var_list*)modeInfo.numbers, 
		modeInfo.numbers
	);
}



//********** TIMER **********

os_t timer;
void (*timerCallback)(void*);
void *timerWorkspace;

void initialiseTimer()
{
	timer = 0;
	timerCallback = NULL;
	timerWorkspace = NULL;
}

void setTimer(int cs, void (*callback)(void*), void *ws)
{
	timer = os_read_monotonic_time() + cs;
	timerCallback = callback;
	timerWorkspace = ws;
}

void updateTimer()
{
	if (timer > 0)
	{
		os_t time = os_read_monotonic_time();
		
		if (time >= timer)
		{
			timer = 0;
			timerCallback(timerWorkspace); 
		}
	}
}



//********** UPDATE GAME **********

void updateGame(void *ws)
{
	switch(gameState)
	{
		case MAIN_MENU:
		{
			int enterPressed;
			os_byte(
				osbyte_SCAN_KEYBOARD,
				73 ^ 0x80,
				0,
				&enterPressed,
				NULL
			);
			
			if (enterPressed)
			{
				gameState = PLAYING;
				//Initialise level
				level.levelNum = 1;
				initLevel(&level, &mario, area, size, logFile);
				setTimer(100, updateGame, ws);
				wimp_force_redraw(block->open.w, 0, 0, 1024, +960);
			}
			else
			{
				setTimer(10, updateGame, ws);
			}
			
			//fprintf(logFile, "Enter pressed: %i\n", enterPressed);
			//fflush(logFile);
			break;
		}
		case PLAYING:
		{
			Player* mario = (Player*)ws;
			
			//Updates all shellcreepers in level
			enum EnemyType enemyType = SHELLCREEPER;
			for (int i = 0; i < level.numOfShellcreepers; i++)
			{
				if (level.shellcreepers[i].enemy.state != ENEMY_DEAD && os_read_monotonic_time() >= level.shellcreepers[i].enemy.timeTillSpawn)
					updateEnemy(&(level.shellcreepers[i].enemy), &(level.shellcreepers[i]), enemyType, &level, &(mario->score), area, (void*)logFile);
				//fprintf(logFile, "x: %f\n y: %f\n\n", level.shellcreepers[i].x, level.shellcreepers[i].y);
				//fflush(logFile);
				//fprintf(logFile, "Sc %i facing: %c\n", i, level.shellcreepers[i].enemy.facing);
				//fflush(logFile);
			}
			
			//Updates all sidesteppers in level
			enemyType = SIDESTEPPER;
			for (int i = 0; i < level.numOfSidesteppers; i++)
			{
				if (level.sidesteppers[i].enemy.state != ENEMY_DEAD && os_read_monotonic_time() >= level.sidesteppers[i].enemy.timeTillSpawn)
					updateEnemy(&(level.sidesteppers[i].enemy), &(level.sidesteppers[i]), enemyType, &level, &(mario->score), area, (void*)logFile);
			}
			
			//Gets keyboard input and updates player accordingly
			updatePlayer(mario, &level, area, &gameState, logFile);
			
			//Call a window redraw and reset the timer
			wimp_force_redraw(block->open.w, 0, 0, 1024, +960);
			setTimer(4, updateGame, ws);
			
			//If mario runs out of lives, game over
			if (mario->extraLives < 0)
			{
				gameState = GAME_OVER;
				wimp_force_redraw(block->open.w, 0, 0, 1024, +960);
				setTimer(500, updateGame, ws);
			}
			break;
		}
		case GAME_OVER:
		{
			wimp_force_redraw(block->open.w, 0, 0, 1024, +960);
			gameState = MAIN_MENU;
			setTimer(10, updateGame, ws);
			break;
		}
	}
}



//********** MAIN FUNCTION **********

int main()
{
	windowOpen = FALSE;
	logFile = fopen("<MarioBros$Dir>.Log", "w");
	task = wimp_initialise(wimp_VERSION_RO3, "Mario Bros", NULL, NULL);
	updateModeInfo();
	
	//Load sprite file and load player sprites
	area = loadSpriteFile("<MarioBros$Dir>.!Sprites", &size, logFile);
	selectPlayerSprites(
		&mario, 
		"mario",
		2,
		area, 
		size,
		&factors,
		modeInfo.info.xEigFactor,
		modeInfo.info.yEigFactor,
		logFile
	);
	
	//Load HUD sprites
	selectHUDSprites(&hud, area, size, logFile);
	
	//Store positions and dimensions of platforms for collision detection
	level.platSize = 8;
		//Top-left
		level.plats[0].numOfSquares = 14;
		level.plats[0].x = 0;
		level.plats[0].y = 152 * factors.ymul * 2;		
		level.plats[0].width = level.plats[0].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[0].height = level.platSize * factors.ymul * 2;
		
		//Top-right
		level.plats[1].numOfSquares = 14;
		level.plats[1].x = 144 * factors.xmul * 2;
		level.plats[1].y = 152 * factors.ymul * 2;		
		level.plats[1].width = level.plats[1].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[1].height = level.platSize * factors.ymul * 2;
		
		//Middle-left
		level.plats[2].numOfSquares = 4;
		level.plats[2].x = 0;
		level.plats[2].y = 96 * factors.ymul * 2;		
		level.plats[2].width = level.plats[2].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[2].height = level.platSize * factors.ymul * 2;
		
		//Middle-right
		level.plats[3].numOfSquares = 4;
		level.plats[3].x = 224 * factors.xmul * 2;
		level.plats[3].y = 96 * factors.ymul * 2;		
		level.plats[3].width = level.plats[3].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[3].height = level.platSize * factors.ymul * 2;		
		
		//Middle
		level.plats[4].numOfSquares = 16;
		level.plats[4].x = 64 * factors.xmul * 2;
		level.plats[4].y = 104 * factors.ymul * 2;		
		level.plats[4].width = level.plats[4].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[4].height = level.platSize * factors.ymul * 2;
		
		//Bottom-left
		level.plats[5].numOfSquares = 12;
		level.plats[5].x = 0;
		level.plats[5].y = 56 * factors.ymul * 2;		
		level.plats[5].width = level.plats[5].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[5].height = level.platSize * factors.ymul * 2;

		//Bottom-right
		level.plats[6].numOfSquares = 12;
		level.plats[6].x = 160 * factors.xmul * 2;
		level.plats[6].y = 56 * factors.ymul * 2;		
		level.plats[6].width = level.plats[6].numOfSquares * level.platSize * factors.xmul * 2;
		level.plats[6].height = level.platSize * factors.ymul * 2;
		
		//Ground
		level.plats[7].x = 0;
		level.plats[7].y = 0;
		level.plats[7].width = 1024;
		level.plats[7].height = 16*4;
		
	
	//Load window
	wimp_open_template("<MarioBros$Dir>.Templates");
	wimp_load_template(wimp_GET_SIZE, NULL, NULL, wimp_NO_FONTS, "Main", context, &used, &data_used);
	data = malloc(data_used);
	window = malloc(used);
	wimp_load_template(window, data, (char const *) data + data_used, wimp_NO_FONTS, "Main", context, NULL, NULL);
	wimp_close_template();
	block = (wimp_block*)malloc(sizeof(wimp_block));
	loadWindowIntoBlock(&window, &block);
	winHandle = block->open.w;
	addIconToBar();
	xwimp_open_window(&block->open);
	xwimp_get_caret_position(&(block->caret));
	xwimp_set_caret_position(
		winHandle,
		-1,
		-1,
		-1,
		-1,
		block->caret.index
	);
	
	//Set timer
	initialiseTimer();
	setTimer(10, updateGame, (void*)&mario);
	
	//*** MAIN LOOP ***
	while (!QUIT)
	{
		//*** WIMP POLL ***
		event = wimp_poll(wimp_QUEUE_KEY, block, NULL);
		switch(event)
		{
			case wimp_NULL_REASON_CODE:
				updateTimer();
				break;
			case wimp_REDRAW_WINDOW_REQUEST:
				redrawWindowPlaying(block, area, &mario, &level, &hud, &gameState, &factors, logFile);
				break;
			case wimp_MOUSE_CLICK:
				fprintf(logFile, "mouse click\n");
				fflush(logFile);
				break;
			case wimp_OPEN_WINDOW_REQUEST:
				wimp_open_window(&block->open);
				windowOpen = TRUE;
				break;
			case wimp_CLOSE_WINDOW_REQUEST:
				wimp_close_window(block->close.w);
				QUIT = TRUE;
				break;
			case wimp_USER_MESSAGE:
			case wimp_USER_MESSAGE_RECORDED:
				QUIT = TRUE;
				break;
		}
	}

	fclose(logFile);
	free(window);
	free(level.shellcreepers);
	wimp_close_down(task);
	return 0;
}